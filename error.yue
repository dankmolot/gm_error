--[[
    MIT License

    Copyright (c) 2023-2024 Retro

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
]]
import isstring, tostring, ErrorNoHaltWithStack, ErrorNoHalt, getmetatable from _G
import format, rep from string
import concat from table

export class Error
    name: "Error"
    @__inherited: ( child ) =>
        child.__base.name = child.__name or @name

    new: ( @message, @fileName, @lineNumber, stackPos ) =>
        @stack = stack = Error.captureStack( stackPos or 3 )
        
        if first := stack[1]
            @fileName or= first.short_src
            @lineNumber or= first.currentline

    __tostring: =>
        if @fileName
            return format( "%s:%d: %s: %s", @fileName, @lineNumber or 0, @name, @message )

        return @name .. ": " .. @message

    display: =>
        if isstring( @ )
            return ErrorNoHaltWithStack( @ )

        lines, length = { "\n[ERROR] " .. tostring( @ ) }, 1

        stack = @stack
        for index = 1, #stack
            length += 1
            info = stack[ index ]
            lines[ length ] = format( "%s %d. %s - %s:%d", rep( " ", index ), index, info.name or "unknown", info.short_src, info.currentline )

        length += 1
        lines[ length ] = "\n"

        ErrorNoHalt concat( lines, "\n", 1, length )
        return

    @captureStack: ( stackPos = 1 ) ->
        stack, length = {}, 0

        for level = 1 + ( stackPos or 1 ), 16
            info = getinfo( level, "Snl" )
            unless info
                break

            length += 1
            stack[ length ] = info

        return stack, length

    @is: ( obj, name = "Error" ) ->
        meta = getmetatable( obj )
        cls = meta and meta.__class
        while cls
            if cls.__name == name
                return true
            cls = cls.__parent
        return false

export iserror = Error.is

export class NotImplementedError extends Error
export class RuntimeError extends Error
export class RangeError extends Error
export class TypeError extends Error
